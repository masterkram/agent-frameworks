---
import { getListings } from "../../lib/getListings";
import PureGrid from "./PureGrid.astro";
import themeConfig from "@util/themeConfig";
import { GITHUB_TOKEN } from "astro:env/server";

// Function to format numbers (e.g., 15590 -> 15.5k)
function formatNumber(num: number) {
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1).replace(".0", "") + "m";
  }
  if (num >= 1000) {
    return (num / 1000).toFixed(1).replace(".0", "") + "k";
  }
  return num.toString();
}

// Function to extract owner and repo name from GitHub URL
function extractRepoInfo(url: string) {
  const match = url.match(/github\.com\/([^/]+)\/([^/]+)/);
  if (!match) return null;
  return { owner: match[1], repo: match[2] };
}

async function addGithubStars(element: any) {
  try {
    // Check if there's a github url in the element data
    if (!element.data?.github) return { ...element };

    const repoInfo = extractRepoInfo(element.data.github);
    if (!repoInfo) return { ...element };

    // Fetch stars from GitHub API
    const response = await fetch(
      `https://api.github.com/repos/${repoInfo.owner}/${repoInfo.repo}`,
      {
        headers: {
          // Optional: Add GitHub token if you have one for higher rate limits
          Authorization: `token ${GITHUB_TOKEN}`,
          Accept: "application/vnd.github.v3+json",
        },
      },
    );

    if (!response.ok) {
      console.log(response);
      console.error(`Failed to fetch stars for ${element.data.github}`);
      return { ...element };
    }

    const data = await response.json();
    const stars = data.stargazers_count || 0;
    const formattedStars = formatNumber(stars);

    return { ...element, data: { ...element.data, stars, formattedStars } };
  } catch (error) {
    console.error(`Error fetching stars for ${element.data?.github}:`, error);
    return { ...element };
  }
}

const allListings = (
  await Promise.all((await getListings()).map(addGithubStars))
).sort((a, b) => Number(b.data.featured) - Number(a.data.featured));
---

<PureGrid
  id="directory-grid"
  data-tag-intersection={themeConfig.directory.search.tags.intersection}
  listings={allListings}
/>

<script>
  import { search, tags } from "../../store.js";
  const gridElement = document.getElementById("directory-grid");
  // Define the filtering function
  function filterListings() {
    const listingsArray = document.querySelectorAll(".listing");
    const currentSearch = search.get().trim().toLowerCase();
    const selectedTags = tags.get();
    const selectedTagsSet: Set<string> = new Set(selectedTags); // For
    const useIntersection = gridElement?.dataset.tagIntersection === "true";

    for (const element of listingsArray) {
      // Get content for search filtering
      const content = (
        (element.querySelector(".card-title")?.textContent || "") +
        (element.querySelector(".card-description")?.textContent || "")
      ).toLowerCase();

      // Get tags from data attribute
      if (element instanceof HTMLElement) {
        const elementTags = element.dataset.tags?.split(",") || [];

        // Determine if the listing matches
        const matchesSearch = content.includes(currentSearch);

        let matchesTags = selectedTags.length === 0;
        if (selectedTags.length > 0) {
          if (useIntersection) {
            // AND logic - must match all selected tags
            matchesTags = selectedTags.every((tag) =>
              elementTags.some((elementTag) => elementTag.trim() === tag),
            );
          } else {
            // OR logic - must match at least one selected tag
            matchesTags = elementTags.some((tag) =>
              selectedTagsSet.has(tag.trim()),
            );
          }
        }

        // Show or hide the listing
        if (matchesSearch && matchesTags) {
          element.classList.remove("hidden");
        } else {
          element.classList.add("hidden");
        }
      }
    }
  }

  // Subscribe to both stores, triggering filtering on any change
  search.subscribe(() => filterListings());
  tags.subscribe(() => filterListings());
</script>
