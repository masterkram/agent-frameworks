---
import { getListings } from "../../lib/getListings";
import PureGrid from "./PureGrid.astro";
import themeConfig from "@util/themeConfig";

const allListings = (await getListings()).sort(
  (a, b) => Number(b.data.featured) - Number(a.data.featured),
);
---

<PureGrid
  id="directory-grid"
  data-tag-intersection={themeConfig.directory.search.tags.intersection}
  listings={allListings}
/>

<script>
  import { search, tags } from "../../store.js";
  const gridElement = document.getElementById("directory-grid");
  // Define the filtering function
  function filterListings() {
    const listingsArray = document.querySelectorAll(".listing");
    const currentSearch = search.get().trim().toLowerCase();
    const selectedTags = tags.get();
    const selectedTagsSet: Set<string> = new Set(selectedTags); // For
    const useIntersection = gridElement?.dataset.tagIntersection === "true";

    for (const element of listingsArray) {
      // Get content for search filtering
      const content = (
        (element.querySelector(".card-title")?.textContent || "") +
        (element.querySelector(".card-description")?.textContent || "")
      ).toLowerCase();

      // Get tags from data attribute
      if (element instanceof HTMLElement) {
        const elementTags = element.dataset.tags?.split(",") || [];

        // Determine if the listing matches
        const matchesSearch = content.includes(currentSearch);

        let matchesTags = selectedTags.length === 0;
        if (selectedTags.length > 0) {
          if (useIntersection) {
            // AND logic - must match all selected tags
            matchesTags = selectedTags.every((tag) =>
              elementTags.some((elementTag) => elementTag.trim() === tag),
            );
          } else {
            // OR logic - must match at least one selected tag
            matchesTags = elementTags.some((tag) =>
              selectedTagsSet.has(tag.trim()),
            );
          }
        }

        // Show or hide the listing
        if (matchesSearch && matchesTags) {
          element.classList.remove("hidden");
        } else {
          element.classList.add("hidden");
        }
      }
    }
  }

  // Subscribe to both stores, triggering filtering on any change
  search.subscribe(() => filterListings());
  tags.subscribe(() => filterListings());
</script>
